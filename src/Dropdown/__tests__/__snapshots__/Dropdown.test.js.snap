// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Dropdown /> should close the dropdown when clicking outside of the component 1`] = `
.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  width: 100%;
  padding: 0.8rem 1.2rem;
  cursor: pointer;
  text-align: left;
  font-size: 1.4rem;
  border: 1px solid hsl(207,22%,90%);
  border-radius: 0.4rem;
  background: linear-gradient( 180deg, hsl(0,100%,100%) 0%, hsl(216,45%,98%) 100% );
  box-shadow: 0 1px 2px 0 rgba(0,0,0,0.08);
  color: hsl(207,13%,45%);
}

.c1::after {
  content: '';
  position: absolute;
  right: 1.4rem;
  top: 37%;
  width: 0;
  height: 0;
  border: 0 solid transparent;
  border-right-width: 3px;
  border-left-width: 3px;
  border-bottom: 3px solid hsl(207,13%,45%);
}

.c1::before {
  content: '';
  position: absolute;
  right: 1.4rem;
  bottom: 37%;
  width: 0;
  height: 0;
  border: 0 solid transparent;
  border-left-width: 3px;
  border-right-width: 3px;
  border-top: 3px solid hsl(207,13%,45%);
}

.c2 {
  position: absolute;
  top: calc(100% + 0.4rem);
  left: 0;
  width: 100%;
  max-height: 28rem;
  border: 1px solid hsl(207,22%,90%);
  border-radius: 0.4rem;
  list-style: none;
  overflow-y: auto;
  background: linear-gradient( 180deg, hsl(0,100%,100%) 0%, hsl(216,45%,98%) 100% );
  color: hsl(207,13%,45%);
  -webkit-transform-origin: 50% 0%;
  -ms-transform-origin: 50% 0%;
  transform-origin: 50% 0%;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding: 0.9rem 1.2rem;
  cursor: pointer;
}

.c3:first-child {
  padding-top: 1.8rem;
}

.c3:last-child {
  padding-bottom: 1.8rem;
}

.c0 {
  position: relative;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

<Styled(OnClickOutside(Dropdown))
  title="title"
>
  <OnClickOutside(Dropdown)
    className="c0"
    eventTypes={
      Array [
        "mousedown",
        "touchstart",
      ]
    }
    excludeScrollbar={false}
    outsideClickIgnoreClass="ignore-react-onclickoutside"
    preventDefault={false}
    stopPropagation={false}
    title="title"
  >
    <Dropdown
      className="c0"
      disableOnClickOutside={[Function]}
      enableOnClickOutside={[Function]}
      eventTypes={
        Array [
          "mousedown",
          "touchstart",
        ]
      }
      noResultLabel={null}
      onToggle={[Function]}
      outsideClickIgnoreClass="ignore-react-onclickoutside"
      preventDefault={false}
      searchBarPlacholder=""
      searchable={false}
      stopPropagation={false}
      title="title"
    >
      <div
        className="c0"
      >
        <styled.button
          aria-expanded={true}
          aria-haspopup="true"
          data-test="dropdown-header"
          onClick={[Function]}
        >
          <button
            aria-expanded={true}
            aria-haspopup="true"
            className="c1"
            data-test="dropdown-header"
            onClick={[Function]}
          >
            title
          </button>
        </styled.button>
        <PoseGroup
          flipMove={true}
        >
          <Transition
            enterAfterExit={false}
            enterPose="enter"
            exitPose="exit"
            flipMove={true}
            preEnterPose="exit"
          >
            <Component
              _pose="enter"
              initialPose="exit"
              key="Menu"
              role="menu"
            >
              <PoseElement
                _pose="enter"
                elementType={[Function]}
                initialPose="exit"
                poseConfig={
                  Object {
                    "enter": Object {
                      "opacity": 1,
                      "scaleY": 1,
                      "transition": Object {
                        "default": Object {
                          "duration": 150,
                        },
                        "scaleY": Object {
                          "duration": 150,
                          "ease": "anticipate",
                        },
                      },
                    },
                    "exit": Object {
                      "opacity": 0,
                      "scaleY": 0,
                      "transition": Object {
                        "duration": 150,
                      },
                    },
                  }
                }
                role="menu"
              >
                <styled.ul
                  hostRef={[Function]}
                  innerRef={[Function]}
                  role="menu"
                >
                  <ul
                    className="c2"
                    role="menu"
                  >
                    <styled.li
                      key="[object Object]/.0"
                      role="menuitem"
                    >
                      <li
                        className="c3"
                        role="menuitem"
                      >
                        <div>
                          Item1
                        </div>
                      </li>
                    </styled.li>
                    <styled.li
                      key="[object Object]/.1"
                      role="menuitem"
                    >
                      <li
                        className="c3"
                        role="menuitem"
                      >
                        <div>
                          Item2
                        </div>
                      </li>
                    </styled.li>
                    <styled.li
                      key="[object Object]/.2"
                      role="menuitem"
                    >
                      <li
                        className="c3"
                        role="menuitem"
                      >
                        <div>
                          Item3
                        </div>
                      </li>
                    </styled.li>
                  </ul>
                </styled.ul>
              </PoseElement>
            </Component>
          </Transition>
        </PoseGroup>
      </div>
    </Dropdown>
  </OnClickOutside(Dropdown)>
</Styled(OnClickOutside(Dropdown))>
`;

exports[`<Dropdown /> should close the dropdown when clicking outside of the component 2`] = `
.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  width: 100%;
  padding: 0.8rem 1.2rem;
  cursor: pointer;
  text-align: left;
  font-size: 1.4rem;
  border: 1px solid hsl(207,22%,90%);
  border-radius: 0.4rem;
  background: linear-gradient( 180deg, hsl(0,100%,100%) 0%, hsl(216,45%,98%) 100% );
  box-shadow: 0 1px 2px 0 rgba(0,0,0,0.08);
  color: hsl(207,13%,45%);
}

.c1::after {
  content: '';
  position: absolute;
  right: 1.4rem;
  top: 37%;
  width: 0;
  height: 0;
  border: 0 solid transparent;
  border-right-width: 3px;
  border-left-width: 3px;
  border-bottom: 3px solid hsl(207,13%,45%);
}

.c1::before {
  content: '';
  position: absolute;
  right: 1.4rem;
  bottom: 37%;
  width: 0;
  height: 0;
  border: 0 solid transparent;
  border-left-width: 3px;
  border-right-width: 3px;
  border-top: 3px solid hsl(207,13%,45%);
}

.c2 {
  position: absolute;
  top: calc(100% + 0.4rem);
  left: 0;
  width: 100%;
  max-height: 28rem;
  border: 1px solid hsl(207,22%,90%);
  border-radius: 0.4rem;
  list-style: none;
  overflow-y: auto;
  background: linear-gradient( 180deg, hsl(0,100%,100%) 0%, hsl(216,45%,98%) 100% );
  color: hsl(207,13%,45%);
  -webkit-transform-origin: 50% 0%;
  -ms-transform-origin: 50% 0%;
  transform-origin: 50% 0%;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding: 0.9rem 1.2rem;
  cursor: pointer;
}

.c3:first-child {
  padding-top: 1.8rem;
}

.c3:last-child {
  padding-bottom: 1.8rem;
}

.c0 {
  position: relative;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

<Styled(OnClickOutside(Dropdown))
  title="title"
>
  <OnClickOutside(Dropdown)
    className="c0"
    eventTypes={
      Array [
        "mousedown",
        "touchstart",
      ]
    }
    excludeScrollbar={false}
    outsideClickIgnoreClass="ignore-react-onclickoutside"
    preventDefault={false}
    stopPropagation={false}
    title="title"
  >
    <Dropdown
      className="c0"
      disableOnClickOutside={[Function]}
      enableOnClickOutside={[Function]}
      eventTypes={
        Array [
          "mousedown",
          "touchstart",
        ]
      }
      noResultLabel={null}
      onToggle={[Function]}
      outsideClickIgnoreClass="ignore-react-onclickoutside"
      preventDefault={false}
      searchBarPlacholder=""
      searchable={false}
      stopPropagation={false}
      title="title"
    >
      <div
        className="c0"
      >
        <styled.button
          aria-expanded={true}
          aria-haspopup="true"
          data-test="dropdown-header"
          onClick={[Function]}
        >
          <button
            aria-expanded={true}
            aria-haspopup="true"
            className="c1"
            data-test="dropdown-header"
            onClick={[Function]}
          >
            title
          </button>
        </styled.button>
        <PoseGroup
          flipMove={true}
        >
          <Transition
            enterAfterExit={false}
            enterPose="enter"
            exitPose="exit"
            flipMove={true}
            preEnterPose="exit"
          >
            <Component
              _pose="enter"
              initialPose="exit"
              key="Menu"
              role="menu"
            >
              <PoseElement
                _pose="enter"
                elementType={[Function]}
                initialPose="exit"
                poseConfig={
                  Object {
                    "enter": Object {
                      "opacity": 1,
                      "scaleY": 1,
                      "transition": Object {
                        "default": Object {
                          "duration": 150,
                        },
                        "scaleY": Object {
                          "duration": 150,
                          "ease": "anticipate",
                        },
                      },
                    },
                    "exit": Object {
                      "opacity": 0,
                      "scaleY": 0,
                      "transition": Object {
                        "duration": 150,
                      },
                    },
                  }
                }
                role="menu"
              >
                <styled.ul
                  hostRef={[Function]}
                  innerRef={[Function]}
                  role="menu"
                >
                  <ul
                    className="c2"
                    role="menu"
                  >
                    <styled.li
                      key="[object Object]/.0"
                      role="menuitem"
                    >
                      <li
                        className="c3"
                        role="menuitem"
                      >
                        <div>
                          Item1
                        </div>
                      </li>
                    </styled.li>
                    <styled.li
                      key="[object Object]/.1"
                      role="menuitem"
                    >
                      <li
                        className="c3"
                        role="menuitem"
                      >
                        <div>
                          Item2
                        </div>
                      </li>
                    </styled.li>
                    <styled.li
                      key="[object Object]/.2"
                      role="menuitem"
                    >
                      <li
                        className="c3"
                        role="menuitem"
                      >
                        <div>
                          Item3
                        </div>
                      </li>
                    </styled.li>
                  </ul>
                </styled.ul>
              </PoseElement>
            </Component>
          </Transition>
        </PoseGroup>
      </div>
    </Dropdown>
  </OnClickOutside(Dropdown)>
</Styled(OnClickOutside(Dropdown))>
`;

exports[`<Dropdown /> should filter items 1`] = `
.c9 {
  display: inline-block;
  border-image-source: none;
  border-image-width: 0;
  padding: 0;
  font-size: 1.1rem;
  line-height: 1.1rem;
}

.c8 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 1.8rem;
  height: 1.8rem;
  margin-right: 0.7rem;
  border-radius: 50%;
  background: hsl(207,22%,90%);
}

.c6 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 100%;
  height: 4rem;
  overflow: hidden;
  border-radius: 0.4rem;
  border: 1px solid hsl(207,22%,90%);
  background-color: hsl(0,100%,100%);
  border: 0;
}

.c7 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  height: 100%;
  background-color: hsl(0,100%,100%);
  margin: 0 0.7rem;
  border-radius: 0.4rem;
  font-size: 1.4rem;
  border: none;
  padding: 0;
  text-align: left;
}

.c7::-webkit-input-placeholder {
  font-size: 1.4rem;
}

.c7:-moz-placeholder {
  font-size: 1.4rem;
}

.c7::-moz-placeholder {
  font-size: 1.4rem;
}

.c7:-ms-input-placeholder {
  font-size: 1.4rem;
}

.c7:focus,
.c7:active {
  outline: none;
}

.c5 {
  width: 100%;
  border-bottom: 1px solid hsl(207,22%,90%);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  width: 100%;
  padding: 0.8rem 1.2rem;
  cursor: pointer;
  text-align: left;
  font-size: 1.4rem;
  border: 1px solid hsl(207,22%,90%);
  border-radius: 0.4rem;
  background: linear-gradient( 180deg, hsl(0,100%,100%) 0%, hsl(216,45%,98%) 100% );
  box-shadow: 0 1px 2px 0 rgba(0,0,0,0.08);
  color: hsl(207,13%,45%);
}

.c1::after {
  content: '';
  position: absolute;
  right: 1.4rem;
  top: 37%;
  width: 0;
  height: 0;
  border: 0 solid transparent;
  border-right-width: 3px;
  border-left-width: 3px;
  border-bottom: 3px solid hsl(207,13%,45%);
}

.c1::before {
  content: '';
  position: absolute;
  right: 1.4rem;
  bottom: 37%;
  width: 0;
  height: 0;
  border: 0 solid transparent;
  border-left-width: 3px;
  border-right-width: 3px;
  border-top: 3px solid hsl(207,13%,45%);
}

.c2 {
  position: absolute;
  top: calc(100% + 0.4rem);
  left: 0;
  width: 100%;
  max-height: 28rem;
  border: 1px solid hsl(207,22%,90%);
  border-radius: 0.4rem;
  list-style: none;
  overflow-y: auto;
  background: linear-gradient( 180deg, hsl(0,100%,100%) 0%, hsl(216,45%,98%) 100% );
  color: hsl(207,13%,45%);
  -webkit-transform-origin: 50% 0%;
  -ms-transform-origin: 50% 0%;
  transform-origin: 50% 0%;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding: 0.9rem 1.2rem;
  cursor: pointer;
}

.c4:first-child {
  padding-top: 1.8rem;
}

.c4:last-child {
  padding-bottom: 1.8rem;
}

.c10 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding: 0.9rem 1.2rem;
  cursor: pointer;
}

.c10:first-child {
  padding-top: 1.8rem;
}

.c10:nth-child(2) {
  padding-top: 1.8rem;
}

.c10:last-child {
  padding-bottom: 1.8rem;
}

.c3 {
  padding: 0;
}

.c3:first-of-type {
  padding: 0;
}

.c0 {
  position: relative;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

<Styled(OnClickOutside(Dropdown))
  searchable={true}
  title="title"
>
  <OnClickOutside(Dropdown)
    className="c0"
    eventTypes={
      Array [
        "mousedown",
        "touchstart",
      ]
    }
    excludeScrollbar={false}
    outsideClickIgnoreClass="ignore-react-onclickoutside"
    preventDefault={false}
    searchable={true}
    stopPropagation={false}
    title="title"
  >
    <Dropdown
      className="c0"
      disableOnClickOutside={[Function]}
      enableOnClickOutside={[Function]}
      eventTypes={
        Array [
          "mousedown",
          "touchstart",
        ]
      }
      noResultLabel={null}
      onToggle={[Function]}
      outsideClickIgnoreClass="ignore-react-onclickoutside"
      preventDefault={false}
      searchBarPlacholder=""
      searchable={true}
      stopPropagation={false}
      title="title"
    >
      <div
        className="c0"
      >
        <styled.button
          aria-expanded={true}
          aria-haspopup="true"
          data-test="dropdown-header"
          onClick={[Function]}
        >
          <button
            aria-expanded={true}
            aria-haspopup="true"
            className="c1"
            data-test="dropdown-header"
            onClick={[Function]}
          >
            title
          </button>
        </styled.button>
        <PoseGroup
          flipMove={true}
        >
          <Transition
            enterAfterExit={false}
            enterPose="enter"
            exitPose="exit"
            flipMove={true}
            preEnterPose="exit"
          >
            <Component
              _pose="enter"
              key="Menu"
              role="menu"
            >
              <PoseElement
                _pose="enter"
                elementType={[Function]}
                poseConfig={
                  Object {
                    "enter": Object {
                      "opacity": 1,
                      "scaleY": 1,
                      "transition": Object {
                        "default": Object {
                          "duration": 150,
                        },
                        "scaleY": Object {
                          "duration": 150,
                          "ease": "anticipate",
                        },
                      },
                    },
                    "exit": Object {
                      "opacity": 0,
                      "scaleY": 0,
                      "transition": Object {
                        "duration": 150,
                      },
                    },
                  }
                }
                role="menu"
              >
                <styled.ul
                  hostRef={[Function]}
                  innerRef={[Function]}
                  role="menu"
                >
                  <ul
                    className="c2"
                    role="menu"
                  >
                    <Styled(styled.li)>
                      <styled.li
                        className="c3"
                      >
                        <li
                          className="c3 c4"
                        >
                          <Styled(SearchBar)
                            onChange={[Function]}
                            placeHolder=""
                            value="Item2"
                          >
                            <SearchBar
                              className="c5"
                              onChange={[Function]}
                              placeHolder=""
                              value="Item2"
                            >
                              <div
                                className="c5"
                              >
                                <TextInput
                                  _onBlur={[Function]}
                                  _onFocus={[Function]}
                                  className=""
                                  data-test="search-input"
                                  disabled={false}
                                  error={false}
                                  fluid={true}
                                  ghost={true}
                                  id=""
                                  info={false}
                                  label={null}
                                  labelPosition="left"
                                  loading={false}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  password={false}
                                  placeHolder=""
                                  search={true}
                                  success={false}
                                  tabIndex="0"
                                  value="Item2"
                                  warning={false}
                                  width="25rem"
                                >
                                  <styled.div
                                    className=""
                                    disabled={false}
                                    error={false}
                                    ghost={true}
                                    hasFocus={false}
                                    info={false}
                                    success={false}
                                    warning={false}
                                    width="100%"
                                  >
                                    <div
                                      className="c6"
                                      disabled={false}
                                      width="100%"
                                    >
                                      <styled.input
                                        disabled={false}
                                        id=""
                                        innerRef={[Function]}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        placeholder=""
                                        tabIndex="0"
                                        type="text"
                                        value="Item2"
                                      >
                                        <input
                                          className="c7"
                                          disabled={false}
                                          id=""
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          placeholder=""
                                          tabIndex="0"
                                          type="text"
                                          value="Item2"
                                        />
                                      </styled.input>
                                      <Styled(Input.Status)
                                        hasFocus={false}
                                        status="search"
                                      >
                                        <Input.Status
                                          className="c8"
                                          hasFocus={false}
                                          status="search"
                                        >
                                          <div
                                            className="c8"
                                          >
                                            <Styled(Icon)
                                              color="hsl(0, 100%, 100%)"
                                              height="1.1rem"
                                              name="search"
                                              spin={false}
                                              width="1.1rem"
                                            >
                                              <Icon
                                                className=""
                                                color="hsl(0, 100%, 100%)"
                                                height="1.1rem"
                                                name="search"
                                                spin={false}
                                                width="1.1rem"
                                              >
                                                <styled.div
                                                  className=""
                                                  data-testid="iconContainer"
                                                  height="1.1rem"
                                                  spin={false}
                                                  width="1.1rem"
                                                >
                                                  <div
                                                    className="c9"
                                                    data-testid="iconContainer"
                                                    height="1.1rem"
                                                    width="1.1rem"
                                                  >
                                                    <svg
                                                      data-testid="iconSvg"
                                                      height="1.1rem"
                                                      style={
                                                        Object {
                                                          "display": "block",
                                                        }
                                                      }
                                                      viewBox="0 0 512 512"
                                                      width="1.1rem"
                                                      xmlns="http://www.w3.org/2000/svg"
                                                    >
                                                      <path
                                                        d="M384.68 354.51l78.405 78.405c8.331 8.331 8.331 21.839 0 30.17-8.331 8.331-21.839 8.331-30.17 0l-78.404-78.404c-32.847 26.274-74.51 41.986-119.844 41.986-106.039 0-192-85.962-192-192 0-106.039 85.961-192 192-192 106.038 0 192 85.961 192 192 0 45.333-15.712 86.997-41.986 119.844zm-42.464-16.24C368.09 311.417 384 274.9 384 234.667c0-82.475-66.859-149.334-149.333-149.334-82.475 0-149.334 66.86-149.334 149.334S152.193 384 234.667 384c40.233 0 76.75-15.91 103.603-41.784a21.534 21.534 0 0 1 3.946-3.946z"
                                                        data-testid="iconSvgPath"
                                                        fill="hsl(0, 100%, 100%)"
                                                        fillRule="evenodd"
                                                      />
                                                    </svg>
                                                  </div>
                                                </styled.div>
                                              </Icon>
                                            </Styled(Icon)>
                                          </div>
                                        </Input.Status>
                                      </Styled(Input.Status)>
                                    </div>
                                  </styled.div>
                                </TextInput>
                              </div>
                            </SearchBar>
                          </Styled(SearchBar)>
                        </li>
                      </styled.li>
                    </Styled(styled.li)>
                    <styled.li
                      key=".1"
                      role="menuitem"
                      searchable={true}
                    >
                      <li
                        className="c10"
                        role="menuitem"
                      >
                        <div
                          key=".1"
                        >
                          Item2
                        </div>
                      </li>
                    </styled.li>
                  </ul>
                </styled.ul>
              </PoseElement>
            </Component>
          </Transition>
        </PoseGroup>
      </div>
    </Dropdown>
  </OnClickOutside(Dropdown)>
</Styled(OnClickOutside(Dropdown))>
`;

exports[`<Dropdown /> should render without a problem 1`] = `
.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  width: 100%;
  padding: 0.8rem 1.2rem;
  cursor: pointer;
  text-align: left;
  font-size: 1.4rem;
  border: 1px solid hsl(207,22%,90%);
  border-radius: 0.4rem;
  background: linear-gradient( 180deg, hsl(0,100%,100%) 0%, hsl(216,45%,98%) 100% );
  box-shadow: 0 1px 2px 0 rgba(0,0,0,0.08);
  color: hsl(207,13%,45%);
}

.c1::after {
  content: '';
  position: absolute;
  right: 1.4rem;
  top: 37%;
  width: 0;
  height: 0;
  border: 0 solid transparent;
  border-right-width: 3px;
  border-left-width: 3px;
  border-bottom: 3px solid hsl(207,13%,45%);
}

.c1::before {
  content: '';
  position: absolute;
  right: 1.4rem;
  bottom: 37%;
  width: 0;
  height: 0;
  border: 0 solid transparent;
  border-left-width: 3px;
  border-right-width: 3px;
  border-top: 3px solid hsl(207,13%,45%);
}

.c0 {
  position: relative;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

<Styled(OnClickOutside(Dropdown))
  title="title"
>
  <OnClickOutside(Dropdown)
    className="c0"
    eventTypes={
      Array [
        "mousedown",
        "touchstart",
      ]
    }
    excludeScrollbar={false}
    outsideClickIgnoreClass="ignore-react-onclickoutside"
    preventDefault={false}
    stopPropagation={false}
    title="title"
  >
    <Dropdown
      className="c0"
      disableOnClickOutside={[Function]}
      enableOnClickOutside={[Function]}
      eventTypes={
        Array [
          "mousedown",
          "touchstart",
        ]
      }
      noResultLabel={null}
      onToggle={[Function]}
      outsideClickIgnoreClass="ignore-react-onclickoutside"
      preventDefault={false}
      searchBarPlacholder=""
      searchable={false}
      stopPropagation={false}
      title="title"
    >
      <div
        className="c0"
      >
        <styled.button
          aria-expanded={false}
          aria-haspopup="true"
          data-test="dropdown-header"
          onClick={[Function]}
        >
          <button
            aria-expanded={false}
            aria-haspopup="true"
            className="c1"
            data-test="dropdown-header"
            onClick={[Function]}
          >
            title
          </button>
        </styled.button>
        <PoseGroup
          flipMove={true}
        >
          <Transition
            enterAfterExit={false}
            enterPose="enter"
            exitPose="exit"
            flipMove={true}
            preEnterPose="exit"
          />
        </PoseGroup>
      </div>
    </Dropdown>
  </OnClickOutside(Dropdown)>
</Styled(OnClickOutside(Dropdown))>
`;

exports[`<Dropdown /> should return Not Found if not item found 1`] = `
.c9 {
  display: inline-block;
  border-image-source: none;
  border-image-width: 0;
  padding: 0;
  font-size: 1.1rem;
  line-height: 1.1rem;
}

.c8 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 1.8rem;
  height: 1.8rem;
  margin-right: 0.7rem;
  border-radius: 50%;
  background: hsl(207,22%,90%);
}

.c6 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 100%;
  height: 4rem;
  overflow: hidden;
  border-radius: 0.4rem;
  border: 1px solid hsl(207,22%,90%);
  background-color: hsl(0,100%,100%);
  border: 0;
}

.c7 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  height: 100%;
  background-color: hsl(0,100%,100%);
  margin: 0 0.7rem;
  border-radius: 0.4rem;
  font-size: 1.4rem;
  border: none;
  padding: 0;
  text-align: left;
}

.c7::-webkit-input-placeholder {
  font-size: 1.4rem;
}

.c7:-moz-placeholder {
  font-size: 1.4rem;
}

.c7::-moz-placeholder {
  font-size: 1.4rem;
}

.c7:-ms-input-placeholder {
  font-size: 1.4rem;
}

.c7:focus,
.c7:active {
  outline: none;
}

.c5 {
  width: 100%;
  border-bottom: 1px solid hsl(207,22%,90%);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  width: 100%;
  padding: 0.8rem 1.2rem;
  cursor: pointer;
  text-align: left;
  font-size: 1.4rem;
  border: 1px solid hsl(207,22%,90%);
  border-radius: 0.4rem;
  background: linear-gradient( 180deg, hsl(0,100%,100%) 0%, hsl(216,45%,98%) 100% );
  box-shadow: 0 1px 2px 0 rgba(0,0,0,0.08);
  color: hsl(207,13%,45%);
}

.c1::after {
  content: '';
  position: absolute;
  right: 1.4rem;
  top: 37%;
  width: 0;
  height: 0;
  border: 0 solid transparent;
  border-right-width: 3px;
  border-left-width: 3px;
  border-bottom: 3px solid hsl(207,13%,45%);
}

.c1::before {
  content: '';
  position: absolute;
  right: 1.4rem;
  bottom: 37%;
  width: 0;
  height: 0;
  border: 0 solid transparent;
  border-left-width: 3px;
  border-right-width: 3px;
  border-top: 3px solid hsl(207,13%,45%);
}

.c2 {
  position: absolute;
  top: calc(100% + 0.4rem);
  left: 0;
  width: 100%;
  max-height: 28rem;
  border: 1px solid hsl(207,22%,90%);
  border-radius: 0.4rem;
  list-style: none;
  overflow-y: auto;
  background: linear-gradient( 180deg, hsl(0,100%,100%) 0%, hsl(216,45%,98%) 100% );
  color: hsl(207,13%,45%);
  -webkit-transform-origin: 50% 0%;
  -ms-transform-origin: 50% 0%;
  transform-origin: 50% 0%;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding: 0.9rem 1.2rem;
  cursor: pointer;
}

.c4:first-child {
  padding-top: 1.8rem;
}

.c4:last-child {
  padding-bottom: 1.8rem;
}

.c3 {
  padding: 0;
}

.c3:first-of-type {
  padding: 0;
}

.c0 {
  position: relative;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

<Styled(OnClickOutside(Dropdown))
  noResultLabel="Not Found"
  searchable={true}
  title="title"
>
  <OnClickOutside(Dropdown)
    className="c0"
    eventTypes={
      Array [
        "mousedown",
        "touchstart",
      ]
    }
    excludeScrollbar={false}
    noResultLabel="Not Found"
    outsideClickIgnoreClass="ignore-react-onclickoutside"
    preventDefault={false}
    searchable={true}
    stopPropagation={false}
    title="title"
  >
    <Dropdown
      className="c0"
      disableOnClickOutside={[Function]}
      enableOnClickOutside={[Function]}
      eventTypes={
        Array [
          "mousedown",
          "touchstart",
        ]
      }
      noResultLabel="Not Found"
      onToggle={[Function]}
      outsideClickIgnoreClass="ignore-react-onclickoutside"
      preventDefault={false}
      searchBarPlacholder=""
      searchable={true}
      stopPropagation={false}
      title="title"
    >
      <div
        className="c0"
      >
        <styled.button
          aria-expanded={true}
          aria-haspopup="true"
          data-test="dropdown-header"
          onClick={[Function]}
        >
          <button
            aria-expanded={true}
            aria-haspopup="true"
            className="c1"
            data-test="dropdown-header"
            onClick={[Function]}
          >
            title
          </button>
        </styled.button>
        <PoseGroup
          flipMove={true}
        >
          <Transition
            enterAfterExit={false}
            enterPose="enter"
            exitPose="exit"
            flipMove={true}
            preEnterPose="exit"
          >
            <Component
              _pose="enter"
              key="Menu"
              role="menu"
            >
              <PoseElement
                _pose="enter"
                elementType={[Function]}
                poseConfig={
                  Object {
                    "enter": Object {
                      "opacity": 1,
                      "scaleY": 1,
                      "transition": Object {
                        "default": Object {
                          "duration": 150,
                        },
                        "scaleY": Object {
                          "duration": 150,
                          "ease": "anticipate",
                        },
                      },
                    },
                    "exit": Object {
                      "opacity": 0,
                      "scaleY": 0,
                      "transition": Object {
                        "duration": 150,
                      },
                    },
                  }
                }
                role="menu"
              >
                <styled.ul
                  hostRef={[Function]}
                  innerRef={[Function]}
                  role="menu"
                >
                  <ul
                    className="c2"
                    role="menu"
                  >
                    <Styled(styled.li)>
                      <styled.li
                        className="c3"
                      >
                        <li
                          className="c3 c4"
                        >
                          <Styled(SearchBar)
                            onChange={[Function]}
                            placeHolder=""
                            value="qwerty"
                          >
                            <SearchBar
                              className="c5"
                              onChange={[Function]}
                              placeHolder=""
                              value="qwerty"
                            >
                              <div
                                className="c5"
                              >
                                <TextInput
                                  _onBlur={[Function]}
                                  _onFocus={[Function]}
                                  className=""
                                  data-test="search-input"
                                  disabled={false}
                                  error={false}
                                  fluid={true}
                                  ghost={true}
                                  id=""
                                  info={false}
                                  label={null}
                                  labelPosition="left"
                                  loading={false}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  password={false}
                                  placeHolder=""
                                  search={true}
                                  success={false}
                                  tabIndex="0"
                                  value="qwerty"
                                  warning={false}
                                  width="25rem"
                                >
                                  <styled.div
                                    className=""
                                    disabled={false}
                                    error={false}
                                    ghost={true}
                                    hasFocus={false}
                                    info={false}
                                    success={false}
                                    warning={false}
                                    width="100%"
                                  >
                                    <div
                                      className="c6"
                                      disabled={false}
                                      width="100%"
                                    >
                                      <styled.input
                                        disabled={false}
                                        id=""
                                        innerRef={[Function]}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        placeholder=""
                                        tabIndex="0"
                                        type="text"
                                        value="qwerty"
                                      >
                                        <input
                                          className="c7"
                                          disabled={false}
                                          id=""
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          placeholder=""
                                          tabIndex="0"
                                          type="text"
                                          value="qwerty"
                                        />
                                      </styled.input>
                                      <Styled(Input.Status)
                                        hasFocus={false}
                                        status="search"
                                      >
                                        <Input.Status
                                          className="c8"
                                          hasFocus={false}
                                          status="search"
                                        >
                                          <div
                                            className="c8"
                                          >
                                            <Styled(Icon)
                                              color="hsl(0, 100%, 100%)"
                                              height="1.1rem"
                                              name="search"
                                              spin={false}
                                              width="1.1rem"
                                            >
                                              <Icon
                                                className=""
                                                color="hsl(0, 100%, 100%)"
                                                height="1.1rem"
                                                name="search"
                                                spin={false}
                                                width="1.1rem"
                                              >
                                                <styled.div
                                                  className=""
                                                  data-testid="iconContainer"
                                                  height="1.1rem"
                                                  spin={false}
                                                  width="1.1rem"
                                                >
                                                  <div
                                                    className="c9"
                                                    data-testid="iconContainer"
                                                    height="1.1rem"
                                                    width="1.1rem"
                                                  >
                                                    <svg
                                                      data-testid="iconSvg"
                                                      height="1.1rem"
                                                      style={
                                                        Object {
                                                          "display": "block",
                                                        }
                                                      }
                                                      viewBox="0 0 512 512"
                                                      width="1.1rem"
                                                      xmlns="http://www.w3.org/2000/svg"
                                                    >
                                                      <path
                                                        d="M384.68 354.51l78.405 78.405c8.331 8.331 8.331 21.839 0 30.17-8.331 8.331-21.839 8.331-30.17 0l-78.404-78.404c-32.847 26.274-74.51 41.986-119.844 41.986-106.039 0-192-85.962-192-192 0-106.039 85.961-192 192-192 106.038 0 192 85.961 192 192 0 45.333-15.712 86.997-41.986 119.844zm-42.464-16.24C368.09 311.417 384 274.9 384 234.667c0-82.475-66.859-149.334-149.333-149.334-82.475 0-149.334 66.86-149.334 149.334S152.193 384 234.667 384c40.233 0 76.75-15.91 103.603-41.784a21.534 21.534 0 0 1 3.946-3.946z"
                                                        data-testid="iconSvgPath"
                                                        fill="hsl(0, 100%, 100%)"
                                                        fillRule="evenodd"
                                                      />
                                                    </svg>
                                                  </div>
                                                </styled.div>
                                              </Icon>
                                            </Styled(Icon)>
                                          </div>
                                        </Input.Status>
                                      </Styled(Input.Status)>
                                    </div>
                                  </styled.div>
                                </TextInput>
                              </div>
                            </SearchBar>
                          </Styled(SearchBar)>
                        </li>
                      </styled.li>
                    </Styled(styled.li)>
                    <styled.li
                      role="menuitem"
                    >
                      <li
                        className="c4"
                        role="menuitem"
                      >
                        Not Found
                      </li>
                    </styled.li>
                  </ul>
                </styled.ul>
              </PoseElement>
            </Component>
          </Transition>
        </PoseGroup>
      </div>
    </Dropdown>
  </OnClickOutside(Dropdown)>
</Styled(OnClickOutside(Dropdown))>
`;

exports[`<Dropdown /> should toogle the dropdown 1`] = `
.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  width: 100%;
  padding: 0.8rem 1.2rem;
  cursor: pointer;
  text-align: left;
  font-size: 1.4rem;
  border: 1px solid hsl(207,22%,90%);
  border-radius: 0.4rem;
  background: linear-gradient( 180deg, hsl(0,100%,100%) 0%, hsl(216,45%,98%) 100% );
  box-shadow: 0 1px 2px 0 rgba(0,0,0,0.08);
  color: hsl(207,13%,45%);
}

.c1::after {
  content: '';
  position: absolute;
  right: 1.4rem;
  top: 37%;
  width: 0;
  height: 0;
  border: 0 solid transparent;
  border-right-width: 3px;
  border-left-width: 3px;
  border-bottom: 3px solid hsl(207,13%,45%);
}

.c1::before {
  content: '';
  position: absolute;
  right: 1.4rem;
  bottom: 37%;
  width: 0;
  height: 0;
  border: 0 solid transparent;
  border-left-width: 3px;
  border-right-width: 3px;
  border-top: 3px solid hsl(207,13%,45%);
}

.c2 {
  position: absolute;
  top: calc(100% + 0.4rem);
  left: 0;
  width: 100%;
  max-height: 28rem;
  border: 1px solid hsl(207,22%,90%);
  border-radius: 0.4rem;
  list-style: none;
  overflow-y: auto;
  background: linear-gradient( 180deg, hsl(0,100%,100%) 0%, hsl(216,45%,98%) 100% );
  color: hsl(207,13%,45%);
  -webkit-transform-origin: 50% 0%;
  -ms-transform-origin: 50% 0%;
  transform-origin: 50% 0%;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding: 0.9rem 1.2rem;
  cursor: pointer;
}

.c3:first-child {
  padding-top: 1.8rem;
}

.c3:last-child {
  padding-bottom: 1.8rem;
}

.c0 {
  position: relative;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

<Styled(OnClickOutside(Dropdown))
  title="title"
>
  <OnClickOutside(Dropdown)
    className="c0"
    eventTypes={
      Array [
        "mousedown",
        "touchstart",
      ]
    }
    excludeScrollbar={false}
    outsideClickIgnoreClass="ignore-react-onclickoutside"
    preventDefault={false}
    stopPropagation={false}
    title="title"
  >
    <Dropdown
      className="c0"
      disableOnClickOutside={[Function]}
      enableOnClickOutside={[Function]}
      eventTypes={
        Array [
          "mousedown",
          "touchstart",
        ]
      }
      noResultLabel={null}
      onToggle={[Function]}
      outsideClickIgnoreClass="ignore-react-onclickoutside"
      preventDefault={false}
      searchBarPlacholder=""
      searchable={false}
      stopPropagation={false}
      title="title"
    >
      <div
        className="c0"
      >
        <styled.button
          aria-expanded={true}
          aria-haspopup="true"
          data-test="dropdown-header"
          onClick={[Function]}
        >
          <button
            aria-expanded={true}
            aria-haspopup="true"
            className="c1"
            data-test="dropdown-header"
            onClick={[Function]}
          >
            title
          </button>
        </styled.button>
        <PoseGroup
          flipMove={true}
        >
          <Transition
            enterAfterExit={false}
            enterPose="enter"
            exitPose="exit"
            flipMove={true}
            preEnterPose="exit"
          >
            <Component
              _pose="enter"
              initialPose="exit"
              key="Menu"
              role="menu"
            >
              <PoseElement
                _pose="enter"
                elementType={[Function]}
                initialPose="exit"
                poseConfig={
                  Object {
                    "enter": Object {
                      "opacity": 1,
                      "scaleY": 1,
                      "transition": Object {
                        "default": Object {
                          "duration": 150,
                        },
                        "scaleY": Object {
                          "duration": 150,
                          "ease": "anticipate",
                        },
                      },
                    },
                    "exit": Object {
                      "opacity": 0,
                      "scaleY": 0,
                      "transition": Object {
                        "duration": 150,
                      },
                    },
                  }
                }
                role="menu"
              >
                <styled.ul
                  hostRef={[Function]}
                  innerRef={[Function]}
                  role="menu"
                >
                  <ul
                    className="c2"
                    role="menu"
                  >
                    <styled.li
                      key="[object Object]/.0"
                      role="menuitem"
                    >
                      <li
                        className="c3"
                        role="menuitem"
                      >
                        <div>
                          Item1
                        </div>
                      </li>
                    </styled.li>
                    <styled.li
                      key="[object Object]/.1"
                      role="menuitem"
                    >
                      <li
                        className="c3"
                        role="menuitem"
                      >
                        <div>
                          Item2
                        </div>
                      </li>
                    </styled.li>
                    <styled.li
                      key="[object Object]/.2"
                      role="menuitem"
                    >
                      <li
                        className="c3"
                        role="menuitem"
                      >
                        <div>
                          Item3
                        </div>
                      </li>
                    </styled.li>
                  </ul>
                </styled.ul>
              </PoseElement>
            </Component>
          </Transition>
        </PoseGroup>
      </div>
    </Dropdown>
  </OnClickOutside(Dropdown)>
</Styled(OnClickOutside(Dropdown))>
`;

exports[`<Dropdown /> should toogle the dropdown 2`] = `
.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  width: 100%;
  padding: 0.8rem 1.2rem;
  cursor: pointer;
  text-align: left;
  font-size: 1.4rem;
  border: 1px solid hsl(207,22%,90%);
  border-radius: 0.4rem;
  background: linear-gradient( 180deg, hsl(0,100%,100%) 0%, hsl(216,45%,98%) 100% );
  box-shadow: 0 1px 2px 0 rgba(0,0,0,0.08);
  color: hsl(207,13%,45%);
}

.c1::after {
  content: '';
  position: absolute;
  right: 1.4rem;
  top: 37%;
  width: 0;
  height: 0;
  border: 0 solid transparent;
  border-right-width: 3px;
  border-left-width: 3px;
  border-bottom: 3px solid hsl(207,13%,45%);
}

.c1::before {
  content: '';
  position: absolute;
  right: 1.4rem;
  bottom: 37%;
  width: 0;
  height: 0;
  border: 0 solid transparent;
  border-left-width: 3px;
  border-right-width: 3px;
  border-top: 3px solid hsl(207,13%,45%);
}

.c2 {
  position: absolute;
  top: calc(100% + 0.4rem);
  left: 0;
  width: 100%;
  max-height: 28rem;
  border: 1px solid hsl(207,22%,90%);
  border-radius: 0.4rem;
  list-style: none;
  overflow-y: auto;
  background: linear-gradient( 180deg, hsl(0,100%,100%) 0%, hsl(216,45%,98%) 100% );
  color: hsl(207,13%,45%);
  -webkit-transform-origin: 50% 0%;
  -ms-transform-origin: 50% 0%;
  transform-origin: 50% 0%;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding: 0.9rem 1.2rem;
  cursor: pointer;
}

.c3:first-child {
  padding-top: 1.8rem;
}

.c3:last-child {
  padding-bottom: 1.8rem;
}

.c0 {
  position: relative;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

<Styled(OnClickOutside(Dropdown))
  title="title"
>
  <OnClickOutside(Dropdown)
    className="c0"
    eventTypes={
      Array [
        "mousedown",
        "touchstart",
      ]
    }
    excludeScrollbar={false}
    outsideClickIgnoreClass="ignore-react-onclickoutside"
    preventDefault={false}
    stopPropagation={false}
    title="title"
  >
    <Dropdown
      className="c0"
      disableOnClickOutside={[Function]}
      enableOnClickOutside={[Function]}
      eventTypes={
        Array [
          "mousedown",
          "touchstart",
        ]
      }
      noResultLabel={null}
      onToggle={[Function]}
      outsideClickIgnoreClass="ignore-react-onclickoutside"
      preventDefault={false}
      searchBarPlacholder=""
      searchable={false}
      stopPropagation={false}
      title="title"
    >
      <div
        className="c0"
      >
        <styled.button
          aria-expanded={false}
          aria-haspopup="true"
          data-test="dropdown-header"
          onClick={[Function]}
        >
          <button
            aria-expanded={false}
            aria-haspopup="true"
            className="c1"
            data-test="dropdown-header"
            onClick={[Function]}
          >
            title
          </button>
        </styled.button>
        <PoseGroup
          flipMove={true}
        >
          <Transition
            enterAfterExit={false}
            enterPose="enter"
            exitPose="exit"
            flipMove={true}
            preEnterPose="exit"
          >
            <Component
              _pose="exit"
              initialPose="exit"
              key="Menu"
              onPoseComplete={[Function]}
              popFromFlow={true}
              role="menu"
            >
              <PoseElement
                _pose="exit"
                elementType={[Function]}
                initialPose="exit"
                onPoseComplete={[Function]}
                popFromFlow={true}
                poseConfig={
                  Object {
                    "enter": Object {
                      "opacity": 1,
                      "scaleY": 1,
                      "transition": Object {
                        "default": Object {
                          "duration": 150,
                        },
                        "scaleY": Object {
                          "duration": 150,
                          "ease": "anticipate",
                        },
                      },
                    },
                    "exit": Object {
                      "opacity": 0,
                      "scaleY": 0,
                      "transition": Object {
                        "duration": 150,
                      },
                    },
                  }
                }
                role="menu"
              >
                <styled.ul
                  hostRef={[Function]}
                  innerRef={[Function]}
                  role="menu"
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "position": "absolute",
                      "top": 0,
                      "width": 0,
                    }
                  }
                >
                  <ul
                    className="c2"
                    role="menu"
                    style={
                      Object {
                        "height": 0,
                        "left": 0,
                        "position": "absolute",
                        "top": 0,
                        "width": 0,
                      }
                    }
                  >
                    <styled.li
                      key="[object Object]/.0"
                      role="menuitem"
                    >
                      <li
                        className="c3"
                        role="menuitem"
                      >
                        <div>
                          Item1
                        </div>
                      </li>
                    </styled.li>
                    <styled.li
                      key="[object Object]/.1"
                      role="menuitem"
                    >
                      <li
                        className="c3"
                        role="menuitem"
                      >
                        <div>
                          Item2
                        </div>
                      </li>
                    </styled.li>
                    <styled.li
                      key="[object Object]/.2"
                      role="menuitem"
                    >
                      <li
                        className="c3"
                        role="menuitem"
                      >
                        <div>
                          Item3
                        </div>
                      </li>
                    </styled.li>
                  </ul>
                </styled.ul>
              </PoseElement>
            </Component>
          </Transition>
        </PoseGroup>
      </div>
    </Dropdown>
  </OnClickOutside(Dropdown)>
</Styled(OnClickOutside(Dropdown))>
`;
