// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Increment /> should match snapshot 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 .c1 {
  border-radius: 0;
  font-size: 2.0rem;
}

.c0 .c1:first-of-type {
  border-top-left-radius: 0.4rem;
  border-bottom-left-radius: 0.4rem;
  border-right: 0;
}

.c0 .c1:nth-child(n):not(:first-of-type) {
  border-left: 0;
}

.c0 .c1:last-of-type {
  border-top-right-radius: 0.4rem;
  border-bottom-right-radius: 0.4rem;
  border-left: 0;
}

.c0 .c2 {
  border-radius: 0;
}

.c0 .c2:focus,
.c0 .c2:active {
  border: none;
  border: 1px solid hsl(207,22%,90%);
}

.c0 .c3 {
  border-radius: 0;
}

.c0 .c3:focus {
  border: none;
}

<div
  className="c0"
  max={1000}
  min={0}
  role="group"
  step={1}
  tabIndex="-1"
  width="5rem"
>
  <Styled(Button)
    appearance="secondary"
    onClick={[Function]}
  >
    -
  </Styled(Button)>
  <NumberInput
    _onBlur={[Function]}
    _onFocus={[Function]}
    decimals={0}
    disabled={false}
    error={false}
    fluid={false}
    id=""
    info={false}
    label={null}
    labelPosition="left"
    max={null}
    min={null}
    onBlur={[Function]}
    onChange={[Function]}
    onFocus={[Function]}
    separator="."
    step={1}
    success={false}
    tabIndex="0"
    validate={false}
    value={0}
    warning={false}
    width="5rem"
  />
  <Styled(Button)
    appearance="secondary"
    onClick={[Function]}
  >
    +
  </Styled(Button)>
</div>
`;

exports[`<Increment /> should match snapshot when + button is clicked 1`] = `
.c2 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  width: auto;
  padding: 0.8rem 1.6rem;
  border-radius: 0.4rem;
  font-size: 1.4rem;
  line-height: 1.4rem;
  color: hsl(0,100%,100%);
  cursor: pointer;
  outline: none;
  -webkit-transition: background 200ms ease,box-shadow 200ms ease;
  transition: background 200ms ease,box-shadow 200ms ease;
  color: hsl(207,13%,45%);
  background: linear-gradient(180deg,hsl(0,100%,100%) 0%,hsl(216,45%,98%) 100%);
  border: 1px solid hsl(207,22%,90%);
  padding: 0.8rem 1.6rem;
}

.c2 svg > path {
  fill: hsl(0,100%,100%);
}

.c2 svg > path {
  fill: hsl(207,13%,45%);
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 5rem;
  height: 4rem;
  overflow: hidden;
  border-radius: 0.4rem;
  border: 1px solid hsl(207,22%,90%);
  background-color: hsl(0,100%,100%);
}

.c6 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  height: 100%;
  background-color: hsl(0,100%,100%);
  margin: 0 0.7rem;
  border-radius: 0.4rem;
  font-size: 1.4rem;
  border: none;
  padding: 0;
  text-align: left;
}

.c6::-webkit-input-placeholder {
  font-size: 1.4rem;
}

.c6:-moz-placeholder {
  font-size: 1.4rem;
}

.c6::-moz-placeholder {
  font-size: 1.4rem;
}

.c6:-ms-input-placeholder {
  font-size: 1.4rem;
}

.c6:focus,
.c6:active {
  outline: none;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 .c1 {
  border-radius: 0;
  font-size: 2.0rem;
}

.c0 .c1:first-of-type {
  border-top-left-radius: 0.4rem;
  border-bottom-left-radius: 0.4rem;
  border-right: 0;
}

.c0 .c1:nth-child(n):not(:first-of-type) {
  border-left: 0;
}

.c0 .c1:last-of-type {
  border-top-right-radius: 0.4rem;
  border-bottom-right-radius: 0.4rem;
  border-left: 0;
}

.c0 .c3 {
  border-radius: 0;
}

.c0 .c3:focus,
.c0 .c3:active {
  border: none;
  border: 1px solid hsl(207,22%,90%);
}

.c0 .c5 {
  border-radius: 0;
}

.c0 .c5:focus {
  border: none;
}

<Styled(Increment)
  appearance="secondary"
  max={100}
  min={0}
  step={1}
  width="5rem"
>
  <Increment
    appearance="secondary"
    className="c0"
    max={100}
    min={0}
    step={1}
    width="5rem"
  >
    <div
      className="c0"
      max={100}
      min={0}
      role="group"
      step={1}
      tabIndex="-1"
      width="5rem"
    >
      <Styled(Button)
        appearance="secondary"
        onClick={[Function]}
      >
        <Button
          appearance="secondary"
          className="c1 "
          disabled={false}
          fluid={false}
          icon={null}
          iconPosition="left"
          onClick={[Function]}
          size="default"
          type="button"
        >
          <styled.button
            appearance="secondary"
            className="c1 "
            disabled={false}
            fluid={false}
            icon={null}
            iconPosition="left"
            onClick={[Function]}
            size="default"
            type="button"
          >
            <button
              className="c1 c2"
              disabled={false}
              icon={null}
              onClick={[Function]}
              size="default"
              type="button"
            >
              -
            </button>
          </styled.button>
        </Button>
      </Styled(Button)>
      <NumberInput
        _onBlur={[Function]}
        _onFocus={[Function]}
        decimals={0}
        disabled={false}
        error={false}
        fluid={false}
        id=""
        info={false}
        label={null}
        labelPosition="left"
        max={null}
        min={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        separator="."
        step={1}
        success={false}
        tabIndex="0"
        validate={false}
        value={1}
        warning={false}
        width="5rem"
      >
        <TextInput
          _onBlur={[Function]}
          _onFocus={[Function]}
          className=""
          disabled={false}
          error={false}
          fluid={false}
          ghost={false}
          id=""
          info={false}
          label={null}
          labelPosition="left"
          loading={false}
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          password={false}
          placeHolder=""
          search={false}
          success={false}
          tabIndex="0"
          value="1"
          warning={false}
          width="5rem"
        >
          <styled.div
            className=""
            disabled={false}
            error={false}
            ghost={false}
            hasFocus={false}
            info={false}
            success={false}
            warning={false}
            width="5rem"
          >
            <div
              className="c3 c4"
              disabled={false}
              width="5rem"
            >
              <styled.input
                disabled={false}
                id=""
                innerRef={[Function]}
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                placeholder=""
                tabIndex="0"
                type="text"
                value="1"
              >
                <input
                  className="c5 c6"
                  disabled={false}
                  id=""
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  placeholder=""
                  tabIndex="0"
                  type="text"
                  value="1"
                />
              </styled.input>
            </div>
          </styled.div>
        </TextInput>
      </NumberInput>
      <Styled(Button)
        appearance="secondary"
        onClick={[Function]}
      >
        <Button
          appearance="secondary"
          className="c1 "
          disabled={false}
          fluid={false}
          icon={null}
          iconPosition="left"
          onClick={[Function]}
          size="default"
          type="button"
        >
          <styled.button
            appearance="secondary"
            className="c1 "
            disabled={false}
            fluid={false}
            icon={null}
            iconPosition="left"
            onClick={[Function]}
            size="default"
            type="button"
          >
            <button
              className="c1 c2"
              disabled={false}
              icon={null}
              onClick={[Function]}
              size="default"
              type="button"
            >
              +
            </button>
          </styled.button>
        </Button>
      </Styled(Button)>
    </div>
  </Increment>
</Styled(Increment)>
`;

exports[`<Increment /> should match snapshot when - button is clicked 1`] = `
.c2 {
  position: relative;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  max-width: 100%;
  width: auto;
  padding: 0.8rem 1.6rem;
  border-radius: 0.4rem;
  font-size: 1.4rem;
  line-height: 1.4rem;
  color: hsl(0,100%,100%);
  cursor: pointer;
  outline: none;
  -webkit-transition: background 200ms ease,box-shadow 200ms ease;
  transition: background 200ms ease,box-shadow 200ms ease;
  color: hsl(207,13%,45%);
  background: linear-gradient(180deg,hsl(0,100%,100%) 0%,hsl(216,45%,98%) 100%);
  border: 1px solid hsl(207,22%,90%);
  padding: 0.8rem 1.6rem;
}

.c2 svg > path {
  fill: hsl(0,100%,100%);
}

.c2 svg > path {
  fill: hsl(207,13%,45%);
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 5rem;
  height: 4rem;
  overflow: hidden;
  border-radius: 0.4rem;
  border: 1px solid hsl(207,22%,90%);
  background-color: hsl(0,100%,100%);
}

.c6 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  height: 100%;
  background-color: hsl(0,100%,100%);
  margin: 0 0.7rem;
  border-radius: 0.4rem;
  font-size: 1.4rem;
  border: none;
  padding: 0;
  text-align: left;
}

.c6::-webkit-input-placeholder {
  font-size: 1.4rem;
}

.c6:-moz-placeholder {
  font-size: 1.4rem;
}

.c6::-moz-placeholder {
  font-size: 1.4rem;
}

.c6:-ms-input-placeholder {
  font-size: 1.4rem;
}

.c6:focus,
.c6:active {
  outline: none;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 .c1 {
  border-radius: 0;
  font-size: 2.0rem;
}

.c0 .c1:first-of-type {
  border-top-left-radius: 0.4rem;
  border-bottom-left-radius: 0.4rem;
  border-right: 0;
}

.c0 .c1:nth-child(n):not(:first-of-type) {
  border-left: 0;
}

.c0 .c1:last-of-type {
  border-top-right-radius: 0.4rem;
  border-bottom-right-radius: 0.4rem;
  border-left: 0;
}

.c0 .c3 {
  border-radius: 0;
}

.c0 .c3:focus,
.c0 .c3:active {
  border: none;
  border: 1px solid hsl(207,22%,90%);
}

.c0 .c5 {
  border-radius: 0;
}

.c0 .c5:focus {
  border: none;
}

<Styled(Increment)
  appearance="secondary"
  max={100}
  min={0}
  step={1}
  width="5rem"
>
  <Increment
    appearance="secondary"
    className="c0"
    max={100}
    min={0}
    step={1}
    width="5rem"
  >
    <div
      className="c0"
      max={100}
      min={0}
      role="group"
      step={1}
      tabIndex="-1"
      width="5rem"
    >
      <Styled(Button)
        appearance="secondary"
        onClick={[Function]}
      >
        <Button
          appearance="secondary"
          className="c1 "
          disabled={false}
          fluid={false}
          icon={null}
          iconPosition="left"
          onClick={[Function]}
          size="default"
          type="button"
        >
          <styled.button
            appearance="secondary"
            className="c1 "
            disabled={false}
            fluid={false}
            icon={null}
            iconPosition="left"
            onClick={[Function]}
            size="default"
            type="button"
          >
            <button
              className="c1 c2"
              disabled={false}
              icon={null}
              onClick={[Function]}
              size="default"
              type="button"
            >
              -
            </button>
          </styled.button>
        </Button>
      </Styled(Button)>
      <NumberInput
        _onBlur={[Function]}
        _onFocus={[Function]}
        decimals={0}
        disabled={false}
        error={false}
        fluid={false}
        id=""
        info={false}
        label={null}
        labelPosition="left"
        max={null}
        min={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        separator="."
        step={1}
        success={false}
        tabIndex="0"
        validate={false}
        value={0}
        warning={false}
        width="5rem"
      >
        <TextInput
          _onBlur={[Function]}
          _onFocus={[Function]}
          className=""
          disabled={false}
          error={false}
          fluid={false}
          ghost={false}
          id=""
          info={false}
          label={null}
          labelPosition="left"
          loading={false}
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          password={false}
          placeHolder=""
          search={false}
          success={false}
          tabIndex="0"
          value="0"
          warning={false}
          width="5rem"
        >
          <styled.div
            className=""
            disabled={false}
            error={false}
            ghost={false}
            hasFocus={false}
            info={false}
            success={false}
            warning={false}
            width="5rem"
          >
            <div
              className="c3 c4"
              disabled={false}
              width="5rem"
            >
              <styled.input
                disabled={false}
                id=""
                innerRef={[Function]}
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                placeholder=""
                tabIndex="0"
                type="text"
                value="0"
              >
                <input
                  className="c5 c6"
                  disabled={false}
                  id=""
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  placeholder=""
                  tabIndex="0"
                  type="text"
                  value="0"
                />
              </styled.input>
            </div>
          </styled.div>
        </TextInput>
      </NumberInput>
      <Styled(Button)
        appearance="secondary"
        onClick={[Function]}
      >
        <Button
          appearance="secondary"
          className="c1 "
          disabled={false}
          fluid={false}
          icon={null}
          iconPosition="left"
          onClick={[Function]}
          size="default"
          type="button"
        >
          <styled.button
            appearance="secondary"
            className="c1 "
            disabled={false}
            fluid={false}
            icon={null}
            iconPosition="left"
            onClick={[Function]}
            size="default"
            type="button"
          >
            <button
              className="c1 c2"
              disabled={false}
              icon={null}
              onClick={[Function]}
              size="default"
              type="button"
            >
              +
            </button>
          </styled.button>
        </Button>
      </Styled(Button)>
    </div>
  </Increment>
</Styled(Increment)>
`;
