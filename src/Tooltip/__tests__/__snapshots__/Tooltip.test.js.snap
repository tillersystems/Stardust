// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Tooltip /> should render a tooltip  displayed above the element 1`] = `
.c0 {
  position: relative;
  display: inline-block;
}

.c1 {
  position: absolute;
  width: auto;
  padding: 0.6rem 1rem;
  border-radius: 0.4rem;
  color: hsl(0,100%,100%);
  background: hsl(213,17%,20%);
  top: 100%;
  left: 50%;
  -webkit-transform: translate3d(-50%,0,0);
  -ms-transform: translate3d(-50%,0,0);
  transform: translate3d(-50%,0,0);
  bottom: 100%;
  top: auto;
}

.c1::before {
  content: '';
  display: block;
  position: absolute;
  top: 0;
  left: 50%;
  z-index: -1;
  height: 0.7rem;
  width: 0.7rem;
  background: hsl(213,17%,20%);
  -webkit-transform: translate3d(0,-50%,0) rotate(135deg);
  -ms-transform: translate3d(0,-50%,0) rotate(135deg);
  transform: translate3d(0,-50%,0) rotate(135deg);
  bottom: 0;
  top: auto;
  -webkit-transform: translate3d(0,50%,0) rotate(135deg);
  -ms-transform: translate3d(0,50%,0) rotate(135deg);
  transform: translate3d(0,50%,0) rotate(135deg);
}

<Tooltip
  active={false}
  arrowPositionX="50%"
  hover={false}
  title="Ventes nettes (ventes brutes moins les réductions et les annulations) plus les taxes sur la période séléctionnée."
  top={true}
  width="auto"
>
  <styled.div>
    <div
      className="c0"
    >
      <button
        id="btn"
        key=".0"
        onClick={[Function]}
        onMouseEnter={null}
        onMouseLeave={null}
        type="button"
      >
        Show Tooltip
      </button>
      <PoseGroup
        flipMove={true}
      >
        <Transition
          enterAfterExit={false}
          enterPose="enter"
          exitPose="exit"
          flipMove={true}
          preEnterPose="exit"
        >
          <Component
            _pose="enter"
            arrowPositionX="50%"
            initialPose="exit"
            key="ContainerAnimation"
            top={true}
            width="auto"
          >
            <PoseElement
              _pose="enter"
              arrowPositionX="50%"
              elementType={[Function]}
              initialPose="exit"
              poseConfig={
                Object {
                  "enter": Object {
                    "opacity": 1,
                    "scale": 1,
                    "transition": Object {
                      "default": Object {
                        "duration": 100,
                      },
                      "scale": Object {
                        "damping": 30,
                        "stiffness": 600,
                        "type": "spring",
                      },
                    },
                    "x": "-50%",
                    "y": [Function],
                  },
                  "exit": Object {
                    "opacity": 0,
                    "scale": 0.9,
                    "transition": Object {
                      "duration": 100,
                    },
                    "x": "-50%",
                    "y": [Function],
                  },
                }
              }
              top={true}
              width="auto"
            >
              <styled.div
                arrowPositionX="50%"
                hostRef={[Function]}
                innerRef={[Function]}
                top={true}
                width="auto"
              >
                <div
                  className="c1"
                  width="auto"
                >
                  Ventes nettes (ventes brutes moins les réductions et les annulations) plus les taxes sur la période séléctionnée.
                </div>
              </styled.div>
            </PoseElement>
          </Component>
        </Transition>
      </PoseGroup>
    </div>
  </styled.div>
</Tooltip>
`;

exports[`<Tooltip /> should render a tooltip which can be displayed on hover 1`] = `
.c0 {
  position: relative;
  display: inline-block;
}

<div
  className="c0"
>
  <button
    key=".0"
    onClick={null}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    type="button"
  >
    Show Tooltip
  </button>
  <PoseGroup
    flipMove={true}
  />
</div>
`;

exports[`<Tooltip /> should render open popover withouth a problem 1`] = `
.c0 {
  position: relative;
  display: inline-block;
}

<div
  className="c0"
>
  <button
    key=".0"
    onClick={[Function]}
    onMouseEnter={null}
    onMouseLeave={null}
    type="button"
  >
    Show Tooltip
  </button>
  <PoseGroup
    flipMove={true}
  >
    <Component
      arrowPositionX="50%"
      key="ContainerAnimation"
      top={false}
      width="auto"
    >
      Ventes nettes (ventes brutes moins les réductions et les annulations) plus les taxes sur la période séléctionnée.
    </Component>
  </PoseGroup>
</div>
`;

exports[`<Tooltip /> should render with a different width 1`] = `
.c0 {
  position: relative;
  display: inline-block;
}

<div
  className="c0"
>
  <button
    key=".0"
    onClick={[Function]}
    onMouseEnter={null}
    onMouseLeave={null}
    type="button"
  >
    Show Tooltip
  </button>
  <PoseGroup
    flipMove={true}
  />
</div>
`;

exports[`<Tooltip /> should render withouth a problem 1`] = `
<styled.div>
  <button
    key=".0"
    onClick={[Function]}
    onMouseEnter={null}
    onMouseLeave={null}
    type="button"
  >
    Show Tooltip
  </button>
  <PoseGroup
    flipMove={true}
  />
</styled.div>
`;

exports[`<Tooltip /> should toggle 1`] = `
.c0 {
  position: relative;
  display: inline-block;
}

.c1 {
  position: absolute;
  width: auto;
  padding: 0.6rem 1rem;
  border-radius: 0.4rem;
  color: hsl(0,100%,100%);
  background: hsl(213,17%,20%);
  top: 100%;
  left: 50%;
  -webkit-transform: translate3d(-50%,0,0);
  -ms-transform: translate3d(-50%,0,0);
  transform: translate3d(-50%,0,0);
}

.c1::before {
  content: '';
  display: block;
  position: absolute;
  top: 0;
  left: 50%;
  z-index: -1;
  height: 0.7rem;
  width: 0.7rem;
  background: hsl(213,17%,20%);
  -webkit-transform: translate3d(0,-50%,0) rotate(135deg);
  -ms-transform: translate3d(0,-50%,0) rotate(135deg);
  transform: translate3d(0,-50%,0) rotate(135deg);
}

<Tooltip
  active={false}
  arrowPositionX="50%"
  hover={false}
  title="Ventes nettes (ventes brutes moins les réductions et les annulations) plus les taxes sur la période séléctionnée."
  top={false}
  width="auto"
>
  <styled.div>
    <div
      className="c0"
    >
      <button
        id="btn"
        key=".0"
        onClick={[Function]}
        onMouseEnter={null}
        onMouseLeave={null}
        type="button"
      >
        Show Tooltip
      </button>
      <PoseGroup
        flipMove={true}
      >
        <Transition
          enterAfterExit={false}
          enterPose="enter"
          exitPose="exit"
          flipMove={true}
          preEnterPose="exit"
        >
          <Component
            _pose="enter"
            arrowPositionX="50%"
            initialPose="exit"
            key="ContainerAnimation"
            top={false}
            width="auto"
          >
            <PoseElement
              _pose="enter"
              arrowPositionX="50%"
              elementType={[Function]}
              initialPose="exit"
              poseConfig={
                Object {
                  "enter": Object {
                    "opacity": 1,
                    "scale": 1,
                    "transition": Object {
                      "default": Object {
                        "duration": 100,
                      },
                      "scale": Object {
                        "damping": 30,
                        "stiffness": 600,
                        "type": "spring",
                      },
                    },
                    "x": "-50%",
                    "y": [Function],
                  },
                  "exit": Object {
                    "opacity": 0,
                    "scale": 0.9,
                    "transition": Object {
                      "duration": 100,
                    },
                    "x": "-50%",
                    "y": [Function],
                  },
                }
              }
              top={false}
              width="auto"
            >
              <styled.div
                arrowPositionX="50%"
                hostRef={[Function]}
                innerRef={[Function]}
                top={false}
                width="auto"
              >
                <div
                  className="c1"
                  width="auto"
                >
                  Ventes nettes (ventes brutes moins les réductions et les annulations) plus les taxes sur la période séléctionnée.
                </div>
              </styled.div>
            </PoseElement>
          </Component>
        </Transition>
      </PoseGroup>
    </div>
  </styled.div>
</Tooltip>
`;

exports[`<Tooltip /> should toggle 2`] = `
.c0 {
  position: relative;
  display: inline-block;
}

.c1 {
  position: absolute;
  width: auto;
  padding: 0.6rem 1rem;
  border-radius: 0.4rem;
  color: hsl(0,100%,100%);
  background: hsl(213,17%,20%);
  top: 100%;
  left: 50%;
  -webkit-transform: translate3d(-50%,0,0);
  -ms-transform: translate3d(-50%,0,0);
  transform: translate3d(-50%,0,0);
}

.c1::before {
  content: '';
  display: block;
  position: absolute;
  top: 0;
  left: 50%;
  z-index: -1;
  height: 0.7rem;
  width: 0.7rem;
  background: hsl(213,17%,20%);
  -webkit-transform: translate3d(0,-50%,0) rotate(135deg);
  -ms-transform: translate3d(0,-50%,0) rotate(135deg);
  transform: translate3d(0,-50%,0) rotate(135deg);
}

<Tooltip
  active={false}
  arrowPositionX="50%"
  hover={false}
  title="Ventes nettes (ventes brutes moins les réductions et les annulations) plus les taxes sur la période séléctionnée."
  top={false}
  width="auto"
>
  <styled.div>
    <div
      className="c0"
    >
      <button
        id="btn"
        key=".0"
        onClick={[Function]}
        onMouseEnter={null}
        onMouseLeave={null}
        type="button"
      >
        Show Tooltip
      </button>
      <PoseGroup
        flipMove={true}
      >
        <Transition
          enterAfterExit={false}
          enterPose="enter"
          exitPose="exit"
          flipMove={true}
          preEnterPose="exit"
        >
          <Component
            _pose="exit"
            arrowPositionX="50%"
            initialPose="exit"
            key="ContainerAnimation"
            onPoseComplete={[Function]}
            popFromFlow={true}
            top={false}
            width="auto"
          >
            <PoseElement
              _pose="exit"
              arrowPositionX="50%"
              elementType={[Function]}
              initialPose="exit"
              onPoseComplete={[Function]}
              popFromFlow={true}
              poseConfig={
                Object {
                  "enter": Object {
                    "opacity": 1,
                    "scale": 1,
                    "transition": Object {
                      "default": Object {
                        "duration": 100,
                      },
                      "scale": Object {
                        "damping": 30,
                        "stiffness": 600,
                        "type": "spring",
                      },
                    },
                    "x": "-50%",
                    "y": [Function],
                  },
                  "exit": Object {
                    "opacity": 0,
                    "scale": 0.9,
                    "transition": Object {
                      "duration": 100,
                    },
                    "x": "-50%",
                    "y": [Function],
                  },
                }
              }
              top={false}
              width="auto"
            >
              <styled.div
                arrowPositionX="50%"
                hostRef={[Function]}
                innerRef={[Function]}
                style={
                  Object {
                    "height": 0,
                    "left": 0,
                    "position": "absolute",
                    "top": 0,
                    "width": 0,
                  }
                }
                top={false}
                width="auto"
              >
                <div
                  className="c1"
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "position": "absolute",
                      "top": 0,
                      "width": 0,
                    }
                  }
                  width="auto"
                >
                  Ventes nettes (ventes brutes moins les réductions et les annulations) plus les taxes sur la période séléctionnée.
                </div>
              </styled.div>
            </PoseElement>
          </Component>
        </Transition>
      </PoseGroup>
    </div>
  </styled.div>
</Tooltip>
`;
