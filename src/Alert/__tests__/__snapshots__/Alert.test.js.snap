// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Alert /> should render withouth a problem 1`] = `
.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  margin-left: 0;
  margin-bottom: 0;
  padding: 0.8rem 1.6rem;
  border-radius: 0.4rem;
  font-size: 1.4rem;
  line-height: 1.4rem;
  color: hsl(0,100%,100%);
  -webkit-transition: background 200ms ease,box-shadow 200ms ease;
  transition: background 200ms ease,box-shadow 200ms ease;
  cursor: pointer;
  outline: none;
  color: hsl(0,100%,100%);
  background: hsl(200,74%,46%) linear-gradient( 0deg, hsla(0,100%,100%,0) 0%, hsla(0,100%,100%,0.1) 100% );
  border: 1px solid #1873a0;
  box-shadow: inset 0 0.2rem 0 0 hsla(0,100%,100%,0.1);
}

.c0 svg > path {
  fill: hsl(0,100%,100%);
}

.c0:hover:not([disabled]):not(:active) {
  background: hsl(200,74%,46%);
  box-shadow: none;
}

.c0:active {
  background-color: #1873a0;
  border: 1px solid #14638a;
  box-shadow: inset 0 0 0 0.1rem #14638a;
}

<AlertProvider
  component={[Function]}
  position="top-center"
  timeout={3000}
>
  <Button
    onClick={[Function]}
    primary={true}
  >
    <Button
      big={false}
      className=""
      disabled={false}
      failure={false}
      fluid={false}
      icon={null}
      iconPosition="left"
      isGoogle={false}
      onClick={[Function]}
      primary={true}
      secondary={false}
      small={false}
      success={false}
      type="button"
    >
      <styled.button
        big={false}
        className=""
        disabled={false}
        failure={false}
        fluid={false}
        isGoogle={false}
        onClick={[Function]}
        primary={true}
        secondary={false}
        small={false}
        success={false}
        type="button"
      >
        <button
          className="c0"
          disabled={false}
          onClick={[Function]}
          type="button"
        >

          Show alert

        </button>
      </styled.button>
    </Button>
  </Button>
  <Portal>
    <Portal
      containerInfo={<div />}
    >
      <PoseGroup
        flipMove={true}
      >
        <Transition
          enterAfterExit={false}
          enterPose="enter"
          exitPose="exit"
          flipMove={true}
          preEnterPose="exit"
        />
      </PoseGroup>
    </Portal>
  </Portal>
</AlertProvider>
`;

exports[`<Alert /> should show an alert message 1`] = `
.c1 {
  position: fixed;
  left: 50%;
  top: 0;
  width: 32rem;
  z-index: 100;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  margin-left: 0;
  margin-bottom: 0;
  padding: 0.8rem 1.6rem;
  border-radius: 0.4rem;
  font-size: 1.4rem;
  line-height: 1.4rem;
  color: hsl(0,100%,100%);
  -webkit-transition: background 200ms ease,box-shadow 200ms ease;
  transition: background 200ms ease,box-shadow 200ms ease;
  cursor: pointer;
  outline: none;
  color: hsl(0,100%,100%);
  background: hsl(200,74%,46%) linear-gradient( 0deg, hsla(0,100%,100%,0) 0%, hsla(0,100%,100%,0.1) 100% );
  border: 1px solid #1873a0;
  box-shadow: inset 0 0.2rem 0 0 hsla(0,100%,100%,0.1);
}

.c0 svg > path {
  fill: hsl(0,100%,100%);
}

.c0:hover:not([disabled]):not(:active) {
  background: hsl(200,74%,46%);
  box-shadow: none;
}

.c0:active {
  background-color: #1873a0;
  border: 1px solid #14638a;
  box-shadow: inset 0 0 0 0.1rem #14638a;
}

.c3 {
  display: inline-block;
  border-image-source: none;
  border-image-width: 0;
  padding: 0;
  font-size: 20;
  line-height: 20;
}

.c4 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  text-align: left;
  margin-left: 2rem;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding: 1.3rem;
  border-radius: 0.5rem;
  color: hsl(0,100%,100%);
  cursor: pointer;
}

.c2 button {
  font-size: 1.4rem;
  background: none;
  color: hsl(0,100%,100%);
  cursor: pointer;
}

<AlertProvider
  component={[Function]}
  position="top-center"
  timeout={3000}
>
  <Button
    onClick={[Function]}
    primary={true}
  >
    <Button
      big={false}
      className=""
      disabled={false}
      failure={false}
      fluid={false}
      icon={null}
      iconPosition="left"
      isGoogle={false}
      onClick={[Function]}
      primary={true}
      secondary={false}
      small={false}
      success={false}
      type="button"
    >
      <styled.button
        big={false}
        className=""
        disabled={false}
        failure={false}
        fluid={false}
        isGoogle={false}
        onClick={[Function]}
        primary={true}
        secondary={false}
        small={false}
        success={false}
        type="button"
      >
        <button
          className="c0"
          disabled={false}
          onClick={[Function]}
          type="button"
        >

          Show alert

        </button>
      </styled.button>
    </Button>
  </Button>
  <Portal>
    <Portal
      containerInfo={
        .c0 {
  position: fixed;
  left: 50%;
  top: 0;
  width: 32rem;
  z-index: 100;
}

.c2 {
  display: inline-block;
  border-image-source: none;
  border-image-width: 0;
  padding: 0;
  font-size: 20;
  line-height: 20;
}

.c3 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  text-align: left;
  margin-left: 2rem;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding: 1.3rem;
  border-radius: 0.5rem;
  color: hsl(0,100%,100%);
  cursor: pointer;
}

.c1 button {
  font-size: 1.4rem;
  background: none;
  color: hsl(0,100%,100%);
  cursor: pointer;
}

<div>
          <div
            class="c0"
            style=""
          >
            <div
              class="c1"
              type="info"
            >
              <span
                aria-label="Message deleted, click to undo"
                role="alert"
              />
              <div
                aria-hidden="true"
                class="c2"
                height="20"
                width="20"
              >
                <svg
                  height="20"
                  style="display: block;"
                  viewBox="0 0 512 512"
                  width="20"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M256 492C125.66 492 20 386.34 20 256S125.66 20 256 20s236 105.66 236 236-105.66 236-236 236zm21.333-150.667V256c0-11.782-9.55-21.333-21.333-21.333-11.782 0-21.333 9.55-21.333 21.333v85.333c0 11.782 9.55 21.334 21.333 21.334 11.782 0 21.333-9.552 21.333-21.334zM256 192c11.782 0 21.333-9.551 21.333-21.333 0-11.782-9.55-21.334-21.333-21.334-11.782 0-21.333 9.552-21.333 21.334S244.217 192 256 192z"
                    fill="hsl(0, 100%, 100%)"
                    fill-rule="evenodd"
                  />
                </svg>
              </div>
              <span
                class="c3"
              >
                Message deleted
              </span>
              <button
                type="button"
              >
                Undo
              </button>
            </div>
          </div>
        </div>
      }
    >
      <PoseGroup
        flipMove={true}
      >
        <Transition
          enterAfterExit={false}
          enterPose="enter"
          exitPose="exit"
          flipMove={true}
          preEnterPose="exit"
        >
          <Component
            _pose="enter"
            alertProps={
              Object {
                "ariaLabel": "Message deleted, click to undo",
                "description": "Message deleted",
                "onClose": [Function],
                "onCloseText": "Undo",
              }
            }
            component={[Function]}
            initialPose="exit"
            key="Container"
            onHide={[Function]}
            position="top-center"
            timeout={3000}
          >
            <PoseElement
              _pose="enter"
              alertProps={
                Object {
                  "ariaLabel": "Message deleted, click to undo",
                  "description": "Message deleted",
                  "onClose": [Function],
                  "onCloseText": "Undo",
                }
              }
              component={[Function]}
              elementType={[Function]}
              initialPose="exit"
              onHide={[Function]}
              poseConfig={
                Object {
                  "enter": Object {
                    "transition": Object {
                      "default": Object {
                        "duration": 250,
                      },
                      "y": Object {
                        "damping": 40,
                        "stiffness": 600,
                        "type": "spring",
                      },
                    },
                    "x": [Function],
                    "y": 0,
                  },
                  "exit": Object {
                    "transition": Object {
                      "duration": 150,
                    },
                    "x": [Function],
                    "y": [Function],
                  },
                }
              }
              position="top-center"
              timeout={3000}
            >
              <AlertContainer
                alertProps={
                  Object {
                    "ariaLabel": "Message deleted, click to undo",
                    "description": "Message deleted",
                    "onClose": [Function],
                    "onCloseText": "Undo",
                  }
                }
                component={[Function]}
                hostRef={[Function]}
                innerRef={[Function]}
                onHide={[Function]}
                position="top-center"
                timeout={3000}
              >
                <styled.div
                  innerRef={[Function]}
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  position="top-center"
                >
                  <div
                    className="c1"
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                  >
                    <Message
                      ariaLabel="Message deleted, click to undo"
                      description="Message deleted"
                      onClose={[Function]}
                      onCloseText="Undo"
                    >
                      <Message
                        ariaLabel="Message deleted, click to undo"
                        className="c2"
                        description="Message deleted"
                        onClose={[Function]}
                        onCloseText="Undo"
                        type="info"
                      >
                        <div
                          className="c2"
                          type="info"
                        >
                          <span
                            aria-label="Message deleted, click to undo"
                            role="alert"
                          />
                          <Styled(Icon)
                            aria-hidden="true"
                            color="hsl(0, 100%, 100%)"
                            name="info"
                          >
                            <Icon
                              aria-hidden="true"
                              className=""
                              color="hsl(0, 100%, 100%)"
                              height="20"
                              name="info"
                              spin={false}
                              width="20"
                            >
                              <styled.div
                                aria-hidden="true"
                                className=""
                                height="20"
                                spin={false}
                                width="20"
                              >
                                <div
                                  aria-hidden="true"
                                  className="c3"
                                  height="20"
                                  width="20"
                                >
                                  <svg
                                    height="20"
                                    style={
                                      Object {
                                        "display": "block",
                                      }
                                    }
                                    viewBox="0 0 512 512"
                                    width="20"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M256 492C125.66 492 20 386.34 20 256S125.66 20 256 20s236 105.66 236 236-105.66 236-236 236zm21.333-150.667V256c0-11.782-9.55-21.333-21.333-21.333-11.782 0-21.333 9.55-21.333 21.333v85.333c0 11.782 9.55 21.334 21.333 21.334 11.782 0 21.333-9.552 21.333-21.334zM256 192c11.782 0 21.333-9.551 21.333-21.333 0-11.782-9.55-21.334-21.333-21.334-11.782 0-21.333 9.552-21.333 21.334S244.217 192 256 192z"
                                      fill="hsl(0, 100%, 100%)"
                                      fillRule="evenodd"
                                    />
                                  </svg>
                                </div>
                              </styled.div>
                            </Icon>
                          </Styled(Icon)>
                          <styled.span>
                            <span
                              className="c4"
                            >
                              Message deleted
                            </span>
                          </styled.span>
                          <button
                            onBlur={[Function]}
                            onClick={[Function]}
                            type="button"
                          >
                            Undo
                          </button>
                        </div>
                      </Message>
                    </Message>
                  </div>
                </styled.div>
              </AlertContainer>
            </PoseElement>
          </Component>
        </Transition>
      </PoseGroup>
    </Portal>
  </Portal>
</AlertProvider>
`;
