// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Modal /> should render close modal withouth a problem 1`] = `
<Modal
  active={false}
  height="35rem"
  onOverlayClick={[Function]}
  width="50rem"
>
  <Portal>
    <PoseGroup
      animateOnMount={true}
      flipMove={true}
    >
      <Transition
        animateOnMount={true}
        enterPose="enter"
        exitPose="exit"
        flipMove={true}
        preEnterPose="exit"
      />
    </PoseGroup>
  </Portal>
</Modal>
`;

exports[`<Modal /> should render open modal with overlay clickable withouth a problem 1`] = `
<Modal
  active={false}
  height="35rem"
  onOverlayClick={[Function]}
  overlayClick={[Function]}
  width="50rem"
>
  <Portal>
    <PoseGroup
      animateOnMount={true}
      flipMove={true}
    >
      <Transition
        animateOnMount={true}
        enterPose="enter"
        exitPose="exit"
        flipMove={true}
        preEnterPose="exit"
      />
    </PoseGroup>
  </Portal>
</Modal>
`;

exports[`<Modal /> should render open modal withouth a problem 1`] = `
.c3 {
  height: 6rem;
  border-bottom: 0.1rem solid hsl(218,18%,91%);
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c4 {
  width: 100%;
  height: auto;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  margin: initial;
}

.c6 {
  margin-left: 0.7rem;
}

.c6:first-child {
  margin-left: 0;
}

.c6:last-child {
  margin-right: 0;
}

.c5 {
  height: 6rem;
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  min-width: 100%;
  height: 100%;
  min-height: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c1 {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 1;
  height: 100%;
  width: 100%;
  min-width: 100%;
  min-height: 100%;
  background-color: rgba(0,0,0,0.5);
}

.c2 {
  z-index: 999;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: 35rem;
  width: 50rem;
  margin: 0 auto;
  padding: 0 1.5rem;
  color: hsl(0,0%,0%);
  font-size: 1.2rem;
  border-radius: 0.4rem;
  background: hsl(0,100%,100%);
}

@media (min-width:0em) and (max-width:35.9375em) {
  .c2 {
    width: 90%;
    margin: 0 auto;
  }
}

<Modal
  active={true}
  height="35rem"
  onOverlayClick={[Function]}
  width="50rem"
>
  <Portal>
    <PoseGroup
      animateOnMount={true}
      flipMove={true}
    >
      <Transition
        animateOnMount={true}
        enterPose="enter"
        exitPose="exit"
        flipMove={true}
        preEnterPose="exit"
      >
        <Component
          initialPose="exit"
          key="ContainerAnimation"
          pose="enter"
        >
          <PoseElement
            elementType={[Function]}
            initialPose="exit"
            pose="enter"
            poseConfig={
              Object {
                "enter": Object {
                  "opacity": 1,
                  "transition": [Function],
                },
                "exit": Object {
                  "opacity": 0,
                  "transition": [Function],
                },
              }
            }
          >
            <styled.div
              hostRef={[Function]}
              innerRef={[Function]}
            >
              <div
                className="c0"
              >
                <styled.div
                  onClick={[Function]}
                >
                  <div
                    className="c1"
                    onClick={[Function]}
                  />
                </styled.div>
                <PoseGroup
                  animateOnMount={true}
                  flipMove={true}
                >
                  <Transition
                    animateOnMount={true}
                    enterPose="enter"
                    exitPose="exit"
                    flipMove={true}
                    preEnterPose="exit"
                  >
                    <Component
                      height="35rem"
                      initialPose="exit"
                      key="DialogAnimation"
                      pose="enter"
                      width="50rem"
                    >
                      <PoseElement
                        elementType={[Function]}
                        getInitialPoseFromParent={[Function]}
                        getParentPoseConfig={[Function]}
                        height="35rem"
                        initialPose="exit"
                        onUnmount={[Function]}
                        pose="enter"
                        poseConfig={
                          Object {
                            "enter": Object {
                              "y": 0,
                            },
                            "exit": Object {
                              "y": 30,
                            },
                          }
                        }
                        registerChild={[Function]}
                        width="50rem"
                      >
                        <styled.dialog
                          height="35rem"
                          hostRef={[Function]}
                          innerRef={[Function]}
                          width="50rem"
                        >
                          <dialog
                            className="c2"
                            height="35rem"
                            width="50rem"
                          >
                            <Styled(ModalHeader)>
                              <ModalHeader
                                className="c3"
                              >
                                <div
                                  className="c3"
                                >
                                  Header
                                </div>
                              </ModalHeader>
                            </Styled(ModalHeader)>
                            <Styled(ModalBody)>
                              <ModalBody
                                className="c4"
                              >
                                <div
                                  className="c4"
                                >
                                  Body
                                </div>
                              </ModalBody>
                            </Styled(ModalBody)>
                            <Styled(ModalFooter)>
                              <ModalFooter
                                alignment="left"
                                className="c5"
                              >
                                <div
                                  alignment="left"
                                  className="c5"
                                >
                                  <styled.div
                                    key="0/.0"
                                  >
                                    <div
                                      className="c6"
                                    >
                                      Footer
                                    </div>
                                  </styled.div>
                                </div>
                              </ModalFooter>
                            </Styled(ModalFooter)>
                          </dialog>
                        </styled.dialog>
                      </PoseElement>
                    </Component>
                  </Transition>
                </PoseGroup>
              </div>
            </styled.div>
          </PoseElement>
        </Component>
      </Transition>
    </PoseGroup>
  </Portal>
</Modal>
`;
